generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Roles {
  id             Int    @id @default(autoincrement())
  nombre_usuario String @unique
  contrasena     String
  rol            String
}

model Usuarios {
  usuarioId String @id
  nombre    String
  email     String
}

model Productos {
  productoId          String              @id
  nombre              String
  precio              Float
  categoria           Float?
  cantidadExistente   Int
  descripcion         String?             @default("Descripci√≥n no disponible")
  proveedor           String?             @default("Proveedor no especificado")
  qr_url              String?
  fechaDeCreacion     DateTime
  fechaDeEliminacion  DateTime?
  fechaDeModificacion DateTime
  compras             Compras[]
  ubicaciones         ProductoUbicacion[]
  ventas              Ventas[]
}

model ProductoUbicacion {
  id         Int       @id @default(autoincrement())
  productoId String
  cantidad   Int       @default(1)
  floorId    Int
  floor      Floor     @relation(fields: [floorId], references: [id])
  producto   Productos @relation(fields: [productoId], references: [productoId])
}

model Ventas {
  ventasId      String    @id
  productoId    String
  fechaYhora    DateTime
  cantidad      Int
  precioUnidad  Float
  cantidadTotal Float
  producto      Productos @relation(fields: [productoId], references: [productoId])
}

model Compras {
  comprasId    String    @id
  productoId   String
  fechaYhora   DateTime
  cantidad     Int
  precioUnidad Float
  precioTotal  Float
  producto     Productos @relation(fields: [productoId], references: [productoId])
}

model Gastos {
  gastosId   String   @id
  categoria  String
  total      Float
  fechaYhora DateTime
}

model ResumenDeVentas {
  resumenDeVentasId  String   @id
  valorTotal         Float
  porcentajeDeCambio Float
  fecha              DateTime
}

model ResumenDeCompras {
  totalComprado      Float
  porcentajeDeCambio Float
  fecha              DateTime
  resumenDeComprasId String   @id
}

model ResumenDeGastos {
  totalGastos        Float
  fecha              DateTime
  resumenDeGastosId  String               @id
  gastosPorCategoria GastosPorCategoria[]
}

model GastosPorCategoria {
  gastosPorCategoriaId String          @id
  fecha                DateTime
  categoria            String
  total                BigInt
  resumenDeGastosId    String
  resumenDeGastos      ResumenDeGastos @relation(fields: [resumenDeGastosId], references: [resumenDeGastosId])
}

model Floor {
  id          Int                 @id @default(autoincrement())
  name        String
  level       Int
  rackId      Int
  rack        Rack                @relation(fields: [rackId], references: [id], onDelete: Cascade)
  ubicaciones ProductoUbicacion[]

  @@index([rackId])
  @@unique([rackId, level])
}

model Rack {
  id     Int     @id @default(autoincrement())
  x      Float
  y      Float
  width  Float   @default(100)
  height Float   @default(100)
  locked Boolean @default(false)
  qrData String  @unique
  floors Floor[]

  @@index([qrData])
}
